diff --git a/qjsc.c b/qjsc.c
index f5bda57..86db7fe 100644
--- a/qjsc.c
+++ b/qjsc.c
@@ -1,6 +1,6 @@
 /*
  * QuickJS command line compiler
- * 
+ *
  * Copyright (c) 2018-2020 Fabrice Bellard
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
@@ -36,6 +36,8 @@
 #include "cutils.h"
 #include "quickjs-libc.h"
 
+#include "path.h"
+
 typedef struct {
     char *name;
     char *short_name;
@@ -131,7 +133,7 @@ static void get_c_name(char *buf, size_t buf_size, const char *file)
     size_t len, i;
     int c;
     char *q;
-    
+
     p = strrchr(file, '/');
     if (!p)
         p = file;
@@ -189,8 +191,8 @@ static void output_object_code(JSContext *ctx,
     }
 
     namelist_add(&cname_list, c_name, NULL, load_only);
-    
-    fprintf(fo, "const uint32_t %s_size = %u;\n\n", 
+
+    fprintf(fo, "const uint32_t %s_size = %u;\n\n",
             c_name, (unsigned int)out_buf_len);
     fprintf(fo, "const uint8_t %s[%u] = {\n",
             c_name, (unsigned int)out_buf_len);
@@ -253,14 +255,27 @@ JSModuleDef *jsc_module_loader(JSContext *ctx,
         uint8_t *buf;
         JSValue func_val;
         char cname[1024];
-        
+
         buf = js_load_file(ctx, &buf_len, module_name);
+/*
         if (!buf) {
             JS_ThrowReferenceError(ctx, "could not load module filename '%s'",
                                    module_name);
             return NULL;
         }
-        
+*/        
+        if (!buf) {
+            // try with a path relative to qjsc exe
+            char path[4096];
+            get_path_with_exe_dir(path, sizeof(path), (char*)module_name);
+            buf = js_load_file(ctx, &buf_len, path);
+            if (!buf) {
+                JS_ThrowReferenceError(ctx, "could not load module filename '%s'",
+                                       module_name);
+                return NULL;
+            }
+        }
+
         /* compile the module */
         func_val = JS_Eval(ctx, (char *)buf, buf_len, module_name,
                            JS_EVAL_TYPE_MODULE | JS_EVAL_FLAG_COMPILE_ONLY);
@@ -272,7 +287,7 @@ JSModuleDef *jsc_module_loader(JSContext *ctx,
             find_unique_cname(cname, sizeof(cname));
         }
         output_object_code(ctx, outfile, func_val, cname, TRUE);
-        
+
         /* the module is already referenced, so we must free it */
         m = JS_VALUE_GET_PTR(func_val);
         JS_FreeValue(ctx, func_val);
@@ -290,7 +305,7 @@ static void compile_file(JSContext *ctx, FILE *fo,
     int eval_flags;
     JSValue obj;
     size_t buf_len;
-    
+
     buf = js_load_file(ctx, &buf_len, filename);
     if (!buf) {
         fprintf(stderr, "Could not load '%s'\n", filename);
@@ -370,6 +385,13 @@ void help(void)
         printf("]\n"
                "            disable selected language features (smaller code size)\n");
     }
+#else
+    //-- define '-fbignum' if 'CONFIG_BIGNUM' is defined
+    #ifdef CONFIG_BIGNUM
+        {
+            printf("-fbignum    enable bignum extensions\n");
+        }
+    #endif
 #endif
     exit(1);
 }
@@ -384,7 +406,7 @@ int exec_cmd(char **argv)
     if (pid == 0) {
         execvp(argv[0], argv);
         exit(1);
-    } 
+    }
 
     for(;;) {
         ret = waitpid(pid, &status, 0);
@@ -401,8 +423,10 @@ static int output_executable(const char *out_filename, const char *cfilename,
     const char **arg, *bn_suffix, *lto_suffix;
     char libjsname[1024];
     char exe_dir[1024], inc_dir[1024], lib_dir[1024], buf[1024], *p;
+    //-- used to store relative path to musl-gcc
+    char musl_gcc[4096];
     int ret;
-    
+
     /* get the directory of the executable */
     pstrcpy(exe_dir, sizeof(exe_dir), exename);
     p = strrchr(exe_dir, '/');
@@ -422,13 +446,20 @@ static int output_executable(const char *out_filename, const char *cfilename,
         snprintf(inc_dir, sizeof(inc_dir), "%s/include/quickjs", CONFIG_PREFIX);
         snprintf(lib_dir, sizeof(lib_dir), "%s/lib/quickjs", CONFIG_PREFIX);
     }
-    
+
     lto_suffix = "";
     bn_suffix = "";
-    
+
     arg = argv;
-    *arg++ = CONFIG_CC;
+    //-- use included musl-gcc wrapper instead of default compiler
+    //*arg++ = CONFIG_CC;
+    snprintf(musl_gcc, sizeof(musl_gcc), "%s/musl-%s/bin/musl-gcc", exe_dir, MUSL_ARCH);
+    *arg++ = musl_gcc;
     *arg++ = "-O2";
+    //-- force static compilation
+    *arg++ = "-static";
+    //-- strip
+    *arg++ = "-s";
 #ifdef CONFIG_LTO
     if (use_lto) {
         *arg++ = "-flto";
@@ -452,14 +483,16 @@ static int output_executable(const char *out_filename, const char *cfilename,
     *arg++ = "-lm";
     *arg++ = "-ldl";
     *arg++ = "-lpthread";
+    //-- link to libatomic (armv7l)
+    *arg++ = "-latomic";
     *arg = NULL;
-    
+
     if (verbose) {
         for(arg = argv; *arg != NULL; arg++)
             printf("%s ", *arg);
         printf("\n");
     }
-    
+
     ret = exec_cmd((char **)argv);
     unlink(cfilename);
     return ret;
@@ -497,7 +530,7 @@ int main(int argc, char **argv)
     BOOL bignum_ext = FALSE;
 #endif
     namelist_t dynamic_module_list;
-    
+
     out_filename = NULL;
     output_type = OUTPUT_EXECUTABLE;
     cname = NULL;
@@ -508,11 +541,13 @@ int main(int argc, char **argv)
     use_lto = FALSE;
     stack_size = 0;
     memset(&dynamic_module_list, 0, sizeof(dynamic_module_list));
-    
+
     /* add system modules */
     namelist_add(&cmodule_list, "std", "std", 0);
     namelist_add(&cmodule_list, "os", "os", 0);
 
+    set_exe_dir_from_exe_name(argv[0]);
+
     for(;;) {
         c = getopt(argc, argv, "ho:cN:f:mxevM:p:S:D:");
         if (c == -1)
@@ -621,14 +656,14 @@ int main(int argc, char **argv)
     } else {
         pstrcpy(cfilename, sizeof(cfilename), out_filename);
     }
-    
+
     fo = fopen(cfilename, "w");
     if (!fo) {
         perror(cfilename);
         exit(1);
     }
     outfile = fo;
-    
+
     rt = JS_NewRuntime();
     ctx = JS_NewContext(rt);
 #ifdef CONFIG_BIGNUM
@@ -639,14 +674,14 @@ int main(int argc, char **argv)
         JS_EnableBignumExt(ctx, TRUE);
     }
 #endif
-    
+
     /* loader for ES6 modules */
     JS_SetModuleLoaderFunc(rt, NULL, jsc_module_loader, NULL);
 
     fprintf(fo, "/* File generated automatically by the QuickJS compiler. */\n"
             "\n"
             );
-    
+
     if (output_type != OUTPUT_C) {
         fprintf(fo, "#include \"quickjs-libc.h\"\n"
                 "\n"
@@ -670,7 +705,7 @@ int main(int argc, char **argv)
             exit(1);
         }
     }
-    
+
     if (output_type != OUTPUT_C) {
         fprintf(fo,
                 "static JSContext *JS_NewCustomContext(JSRuntime *rt)\n"
@@ -701,7 +736,7 @@ int main(int argc, char **argv)
         for(i = 0; i < init_module_list.count; i++) {
             namelist_entry_t *e = &init_module_list.array[i];
             /* initialize the static C modules */
-            
+
             fprintf(fo,
                     "  {\n"
                     "    extern JSModuleDef *js_init_module_%s(JSContext *ctx, const char *name);\n"
@@ -719,19 +754,19 @@ int main(int argc, char **argv)
         fprintf(fo,
                 "  return ctx;\n"
                 "}\n\n");
-        
+
         fputs(main_c_template1, fo);
 
         if (stack_size != 0) {
             fprintf(fo, "  JS_SetMaxStackSize(rt, %u);\n",
                     (unsigned int)stack_size);
         }
-        
+
         /* add the module loader if necessary */
         if (feature_bitmap & (1 << FE_MODULE_LOADER)) {
             fprintf(fo, "  JS_SetModuleLoaderFunc(rt, NULL, js_module_loader, NULL);\n");
         }
-        
+
         fprintf(fo,
                 "  ctx = JS_NewCustomContext(rt);\n"
                 "  js_std_add_helpers(ctx, argc, argv);\n");
@@ -745,7 +780,7 @@ int main(int argc, char **argv)
         }
         fputs(main_c_template2, fo);
     }
-    
+
     JS_FreeContext(ctx);
     JS_FreeRuntime(rt);
 
